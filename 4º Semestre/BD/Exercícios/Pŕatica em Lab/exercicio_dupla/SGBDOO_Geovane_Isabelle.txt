Alunos : Geovane Fonseca e Isabelle Langkammer


1 - Ler os Textos 

2 - Responda as Questões
a) Compare as vantagens e desvantagens de um sistema relacional e um sistema OO.

  Um sistema de banco de dados relacional é extremamente confiável e eficiente do que a maioria dos SGBDs, além da persistência dos dados. As regras para a persistência dos dados podem ser criados no próprio banco de dados. Já o modelo orientado a objetos é melhor para implementação de estruturas complexas e para expressar as relações complexas entre os objetos. Além da abstração da realidade ser simplicada e também um objeto poder ser reutilizado no mesmo programa ou em um programa diferente.
  A desvantagem do banco de dados relacional é em abstrair a realidade, ou seja, traduzir para as tabelas um problema real. No banco de dados orientado a objetos o problema está na aderência dos principios da orientação a objetos, pois o sistema OO não conseguiu substituir os sistemas relacionais, muitas vezes o programa tem uma parte orientada a objetos e acessa o banco de dados de modo convencional.



b) Cite e explique as características de um SGBDPOO.

  Um SGBDPOO, ou Bancos de Dados Puramente Orientados a Objetos permitem a representação de relacionamentos 1 X N, N X N  e de herança. A representação de um relacionamento é feita incluindo um object identifiers dos outros objetos com os quais ele se relaciona. As declarações de classes são semelhantes as declarações de linguagens orientadas a objetos. Não possuem um padrão único de implementação.


c) Cite e explique as características de um BDOR.

    Um BDOR ou Bancos de Dados Objeto-Relacionais permitem o armazenamento de objetos em suas tabelas. Um classe não apresenta um elemento envolvido em relacionamento.

d) Explique as regras para mapeamento de objeto no modelo relacional.

  - Todas as tabelas devem ter uma chave primária pois garante a unicidade do objeto.
  - Os atributos simples são mapeados para as colunas, os compostos mapeados em várias colunas. E os multivalorados são mapeados em tabelas.
  - A herança pode ser mapeada criando uma tabela para cada classe. Ou criar uma única tabela para toda a hierarquia de classes. E também pode criar uma tabela para cada classe concreta.
  - A associação N X N é representada por uma tabela associativa em que a chave primária é composta pelas chaves primárias das tabelas associadas.
  - Na associação N X N com Classe de Associação os atributos da classe associativa permanecerão na tabela que é gerada para mapear a associação. 
  - Na associação 1 X N a referência da tabela unitária é herdada pela tabela de muitos relacionamentos.
  - Na associação 1 X N com Classe de Associação os atributos da classe associativa são herdados como atributos normais pela tabela que herda a chave estrangeira.
  - Na associação 1 X 1 pode gerar uma única tabela ou então gerar uma tabela para cada classe.


_______________________________________________________________________________________________________________________________________________________________

3 - Comandos e  respostas das implementações SGBDROO 

1)
  create type t_endereco as object (
  	rua varchar2(40),
  	cidade varchar2(30),
  	uf char(2),cep number(8)
  );
  /


2)
  create type t_funcionario as object (
  	matricula number(5),
  	nome varchar2(30),
  	data_admissao date,
  	endereco t_endereco
  );
  /


3)
  create table funcionarios of t_funcionario;

  insert into funcionarios VALUES (1574, 'Isabelle', '14112017', t_endereco('Rua David Rabelo, 571, Alipio de Melo', 'Belo Horizonte', 'MG', '30820363'));

  declare
  	v_funcionario t_funcionario;
  begin
  	select value(f) into v_funcionario
  	  from funcionarios f
  	  where matricula = 1574;
  	dbms_output.put_line (v_funcionario.nome);
  end;


4)
  create type t_departamento as object (
  	num_depto number,
  	nome varchar2(30),
  	endereco t_endereco
  );/

  create table departamentos of t_departamento;/

  create table funcionarios2 (
  	matricula number,
  	nome varchar2(30),
  	depto ref t_departamento
  );
/


5)
  create table funcionarios3 (
  	matricula number,
  	nome varchar2(30),
  	depto ref t_departamento scope is departamentos
  );
  /


6)
  create type t_pessoa as object (
  	nome varchar2(30),
  	endereco t_endereco,
  	data_nasc date,
  	amigo REF t_pessoa
    );
  /


7)
  insert into departamentos
  values (1,
  	‘ITP’,
  	t_endereco (‘Rua José Seabra, 255’,‘Aracaju’, ‘SE’, 49000000)
  );
  /

  insert into funcionarios3
  values (4036,'Beatriz',
  	(select ref(d)
  	   from departamentos d
  	   where d.nome='ITP'));

8)
  declare
  	v_depto t_departamento;
  	v_nome_depto varchar2(30);
  begin
  	select deref(depto) into v_depto
  	  from funcionarios3
  	  where nome='Beatriz';

  	select v_depto.nome into v_nome_depto
  	  from dual;
  end;
  /


9)
  create or replace trigger departamento_d
  	after delete on departamentos
  	for each row

  declare
  	d_ref REF t_departamento;
  begin
  	select REF(d) into d_ref
  	  from departamentos d
  	  where d.num_depto=:old.num_depto;

  	update funcionarios3 f set f.depto = null
  	  where f.depto = d_ref;
  end;
  /


10)
  create type t_livro as object (
  	numero number(4),
  	titulo varchar2(40)
  );
  /

  create type lista_livros as table of t_livro;
  /

  create table material_disciplina (
  	departamento char(4),
  	curso number(3),
  	livros_requeridos lista_livros
  )
  nested table livros_requeridos store
  as livros_requeridos_tab;
  /


11)
  insert into material_disciplina
  values (‘ccft’,
  	10,
  	lista_livros (
  		t_livro (1, ‘Oracle 9i’),
  		t_livro (2, ‘Oracle 8i’)
  	)
  );
  /


12)
  select l.titulo
    from material_disciplina m,
    table(m.livros_requeridos) l
    where m.departamento=’ccft’ and m.curso=10;
    /


13)
  create type t_funcionario as object (
  	nome varchar2(30),
  	data_nasc date,
  	member function idade return integer,
  	member procedure altera_nome(p_nome IN varchar2),
  	map member function retornar_nome return varchar2,
  	order member function comparar_func (p_func in t_funcionario ) return number
  );


14)
  create type body t_funcionario3 is
  	member function idade return integer is I integer;
  	begin
  		select trunc(months_between (sysdate,self.data_nasc) / 12) into I
  		from dual;
  	end;
  	member procedure altera_nome (p_nome IN varchar2) is
  	begin
  		nome := p_nome;
  	end;
  end;
  /


15)
  create type t_pessoa2 as object (
  	codigo number,
  	nome varchar2(30),
  	endereço varchar2(100)
  ) not final;
  /


16)
  create type t_Estudante under t_pessoa2 (
  	cod_dep number,
  	disciplina_principal varchar2(30)
  ) not final;


17)
  create table pessoas of t_pessoa;

  create table estudantes of t_estudante
  	under t_pessoa;

  create table empregados of t_empregado
  	under t_pessoa;

______________________________________________________________________________________________________________________________________________________________

Resultados


SQL> insert into funcionarios3
  2  values (4036,'Beatriz',
  3     (select ref(d)
  4        from departamentos d
  5        where d.nome='ITP'));

1 linha criada.

SQL> declare
  2     v_depto departamento;
  3     v_nome_depto varchar2(30);
  4  begin
  5     select deref(depto) into v_depto
  6       from funcionarios
  7       where nome='Beatriz';
  8
  9     select v_depto.nome into v_nome_depto
 10       from dual;
 11  end;
 12  /



SQL> declare
  2     v_depto t_departamento;
  3     v_nome_depto varchar2(30);
  4  begin
  5     select deref(depto) into v_depto
  6       from funcionarios3
  7       where nome='Beatriz';
  8
  9     select v_depto.nome into v_nome_depto
 10       from dual;
 11  end;
 12  /

Procedimento PL/SQL concluÝdo com sucesso.

SQL> create or replace trigger departamento_d
  2     after delete on departamentos
  3     for each row
  4
  5  declare
  6     d_ref REF t_departamento;
  7  begin
  8     select REF(d) into d_ref
  9       from departamentos d
 10       where d.num_depto=:old.num_depto;
 11
 12     update funcionarios f set f.depto = null
 13       where f.depto = d_ref;
 14  end;
 15  /

AdvertÛncia: Gatilho criado com erros de compilaþÒo.

SQL> create or replace trigger departamento_d
  2     after delete on departamentos
  3     for each row
  4
  5  declare
  6     d_ref REF t_departamento;
  7  begin
  8     select REF(d) into d_ref
  9       from departamentos d
 10       where d.num_depto=:old.num_depto;
 11
 12     update funcionarios3 f set f.depto = null
 13       where f.depto = d_ref;
 14  end;
 15  /

Gatilho criado.

SQL> create type t_livro as object (
  2     numero number(4),
  3     titulo varchar2(40)
  4  );
  5  /

Tipo criado.

SQL> create type lista_livros as table of t_livro;
  2  /

Tipo criado.




SQL>
SQL> -- A definição a seguir cria a tabela que irá
SQL> -- armazenar todas as informações do material
SQL> -- necessário à disciplina:
SQL>
SQL> create table material_disciplina (
  2     departamento char(4),
  3     curso number(3),
  4     livros_requeridos lista_livros
  5  )
  6  nested table livros_requeridos store
  7  as livros_requeridos_tab;

Tabela criada.



SQL> insert into material_disciplina
  2  values ('ccft',
  3     10,
  4     lista_livros (
  5             t_livro (1, 'Oracle 9i'),
  6             t_livro (2, 'Oracle 8i')
  7     )
  8  );

1 linha criada.



SQL> select l.titulo
  2    from material_disciplina m,
  3    table(m.livros_requeridos) l
  4    where m.departamento='ccft' and m.curso=10;

TITULO
----------------------------------------
Oracle 9i
Oracle 8i



SQL> create type body t_funcionario3 is
  2     member function idade return integer is I integer;
  3     begin
  4             select trunc(months_between (sysdate,self.data_nasc) / 12) into
I
  5             from dual;
  6     end;
  7     member procedure altera_nome (p_nome IN varchar2) is
  8     begin
  9             nome := p_nome;
 10     end;
 11  end;
 12
 13  /

AdvertÛncia: Tipo de Corpo criado com erros de compilaþÒo.

SQL> create type t_pessoa2 as object (
  2     codigo number,
  3     nome varchar2(30),
  4     endereço varchar2(100)
  5  ) not final;
  6
  7  /

AdvertÛncia: Tipo criado com erros de compilaþÒo.

SQL> create type t_Estudante under t_pessoa2 (
  2     cod_dep number,
  3     disciplina_principal varchar2(30)
  4  ) not final;
  5  /

AdvertÛncia: Tipo criado com erros de compilaþÒo.

SQL> create table pessoas of t_pessoa;

Tabela criada.

SQL>












